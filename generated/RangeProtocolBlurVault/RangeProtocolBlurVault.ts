// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AuctionStarted extends ethereum.Event {
  get params(): AuctionStarted__Params {
    return new AuctionStarted__Params(this);
  }
}

export class AuctionStarted__Params {
  _event: AuctionStarted;

  constructor(event: AuctionStarted) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lienId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Burned extends ethereum.Event {
  get params(): Burned__Params {
    return new Burned__Params(this);
  }
}

export class Burned__Params {
  _event: Burned;

  constructor(event: Burned) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get withdrawAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class EIP712DomainChanged extends ethereum.Event {
  get params(): EIP712DomainChanged__Params {
    return new EIP712DomainChanged__Params(this);
  }
}

export class EIP712DomainChanged__Params {
  _event: EIP712DomainChanged;

  constructor(event: EIP712DomainChanged) {
    this._event = event;
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Loaned extends ethereum.Event {
  get params(): Loaned__Params {
    return new Loaned__Params(this);
  }
}

export class Loaned__Params {
  _event: Loaned;

  constructor(event: Loaned) {
    this._event = event;
  }

  get lienId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class ManagerFeeSet extends ethereum.Event {
  get params(): ManagerFeeSet__Params {
    return new ManagerFeeSet__Params(this);
  }
}

export class ManagerFeeSet__Params {
  _event: ManagerFeeSet;

  constructor(event: ManagerFeeSet) {
    this._event = event;
  }

  get managerFee(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get shares(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get depositAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NFTLiquidated extends ethereum.Event {
  get params(): NFTLiquidated__Params {
    return new NFTLiquidated__Params(this);
  }
}

export class NFTLiquidated__Params {
  _event: NFTLiquidated;

  constructor(event: NFTLiquidated) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class NFTSeized extends ethereum.Event {
  get params(): NFTSeized__Params {
    return new NFTSeized__Params(this);
  }
}

export class NFTSeized__Params {
  _event: NFTSeized;

  constructor(event: NFTSeized) {
    this._event = event;
  }

  get collection(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get lienId(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newManager(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Paused extends ethereum.Event {
  get params(): Paused__Params {
    return new Paused__Params(this);
  }
}

export class Paused__Params {
  _event: Paused;

  constructor(event: Paused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Unpaused extends ethereum.Event {
  get params(): Unpaused__Params {
    return new Unpaused__Params(this);
  }
}

export class Unpaused__Params {
  _event: Unpaused;

  constructor(event: Unpaused) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class RangeProtocolBlurVault__eip712DomainResult {
  value0: Bytes;
  value1: string;
  value2: string;
  value3: BigInt;
  value4: Address;
  value5: Bytes;
  value6: Array<BigInt>;

  constructor(
    value0: Bytes,
    value1: string,
    value2: string,
    value3: BigInt,
    value4: Address,
    value5: Bytes,
    value6: Array<BigInt>
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromFixedBytes(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set("value2", ethereum.Value.fromString(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromAddress(this.value4));
    map.set("value5", ethereum.Value.fromFixedBytes(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigIntArray(this.value6));
    return map;
  }

  getFields(): Bytes {
    return this.value0;
  }

  getName(): string {
    return this.value1;
  }

  getVersion(): string {
    return this.value2;
  }

  getChainId(): BigInt {
    return this.value3;
  }

  getVerifyingContract(): Address {
    return this.value4;
  }

  getSalt(): Bytes {
    return this.value5;
  }

  getExtensions(): Array<BigInt> {
    return this.value6;
  }
}

export class RangeProtocolBlurVault__getLiensByIndexResultLiensDataStruct extends ethereum.Tuple {
  get lien(): RangeProtocolBlurVault__getLiensByIndexResultLiensDataLienStruct {
    return changetype<
      RangeProtocolBlurVault__getLiensByIndexResultLiensDataLienStruct
    >(this[0].toTuple());
  }

  get lienId(): BigInt {
    return this[1].toBigInt();
  }
}

export class RangeProtocolBlurVault__getLiensByIndexResultLiensDataLienStruct extends ethereum.Tuple {
  get lender(): Address {
    return this[0].toAddress();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get auctionStartBlock(): BigInt {
    return this[7].toBigInt();
  }

  get auctionDuration(): BigInt {
    return this[8].toBigInt();
  }
}

export class RangeProtocolBlurVault extends ethereum.SmartContract {
  static bind(address: Address): RangeProtocolBlurVault {
    return new RangeProtocolBlurVault("RangeProtocolBlurVault", address);
  }

  MAX_MANAGER_FEE(): BigInt {
    let result = super.call(
      "MAX_MANAGER_FEE",
      "MAX_MANAGER_FEE():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_MAX_MANAGER_FEE(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_MANAGER_FEE",
      "MAX_MANAGER_FEE():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  UPGRADE_INTERFACE_VERSION(): string {
    let result = super.call(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );

    return result[0].toString();
  }

  try_UPGRADE_INTERFACE_VERSION(): ethereum.CallResult<string> {
    let result = super.tryCall(
      "UPGRADE_INTERFACE_VERSION",
      "UPGRADE_INTERFACE_VERSION():(string)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  blend(): Address {
    let result = super.call("blend", "blend():(address)", []);

    return result[0].toAddress();
  }

  try_blend(): ethereum.CallResult<Address> {
    let result = super.tryCall("blend", "blend():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  blurPool(): Address {
    let result = super.call("blurPool", "blurPool():(address)", []);

    return result[0].toAddress();
  }

  try_blurPool(): ethereum.CallResult<Address> {
    let result = super.tryCall("blurPool", "blurPool():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  burn(shares: BigInt): BigInt {
    let result = super.call("burn", "burn(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares)
    ]);

    return result[0].toBigInt();
  }

  try_burn(shares: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("burn", "burn(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(shares)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  eip712Domain(): RangeProtocolBlurVault__eip712DomainResult {
    let result = super.call(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );

    return new RangeProtocolBlurVault__eip712DomainResult(
      result[0].toBytes(),
      result[1].toString(),
      result[2].toString(),
      result[3].toBigInt(),
      result[4].toAddress(),
      result[5].toBytes(),
      result[6].toBigIntArray()
    );
  }

  try_eip712Domain(): ethereum.CallResult<
    RangeProtocolBlurVault__eip712DomainResult
  > {
    let result = super.tryCall(
      "eip712Domain",
      "eip712Domain():(bytes1,string,string,uint256,address,bytes32,uint256[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new RangeProtocolBlurVault__eip712DomainResult(
        value[0].toBytes(),
        value[1].toString(),
        value[2].toString(),
        value[3].toBigInt(),
        value[4].toAddress(),
        value[5].toBytes(),
        value[6].toBigIntArray()
      )
    );
  }

  getCurrentlyOwnedDebt(): BigInt {
    let result = super.call(
      "getCurrentlyOwnedDebt",
      "getCurrentlyOwnedDebt():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getCurrentlyOwnedDebt(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getCurrentlyOwnedDebt",
      "getCurrentlyOwnedDebt():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getLiensByIndex(
    from: BigInt,
    to: BigInt
  ): Array<RangeProtocolBlurVault__getLiensByIndexResultLiensDataStruct> {
    let result = super.call(
      "getLiensByIndex",
      "getLiensByIndex(uint256,uint256):(((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256),uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(to)
      ]
    );

    return result[0].toTupleArray<
      RangeProtocolBlurVault__getLiensByIndexResultLiensDataStruct
    >();
  }

  try_getLiensByIndex(
    from: BigInt,
    to: BigInt
  ): ethereum.CallResult<
    Array<RangeProtocolBlurVault__getLiensByIndexResultLiensDataStruct>
  > {
    let result = super.tryCall(
      "getLiensByIndex",
      "getLiensByIndex(uint256,uint256):(((address,address,address,uint256,uint256,uint256,uint256,uint256,uint256),uint256)[])",
      [
        ethereum.Value.fromUnsignedBigInt(from),
        ethereum.Value.fromUnsignedBigInt(to)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<
        RangeProtocolBlurVault__getLiensByIndexResultLiensDataStruct
      >()
    );
  }

  getUnderlyingBalance(): BigInt {
    let result = super.call(
      "getUnderlyingBalance",
      "getUnderlyingBalance():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getUnderlyingBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUnderlyingBalance",
      "getUnderlyingBalance():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liensCount(): BigInt {
    let result = super.call("liensCount", "liensCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_liensCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("liensCount", "liensCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  manager(): Address {
    let result = super.call("manager", "manager():(address)", []);

    return result[0].toAddress();
  }

  try_manager(): ethereum.CallResult<Address> {
    let result = super.tryCall("manager", "manager():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  managerFee(): BigInt {
    let result = super.call("managerFee", "managerFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_managerFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("managerFee", "managerFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(owner: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);

    return result[0].toBigInt();
  }

  try_nonces(owner: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(owner)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): Bytes {
    let result = super.call(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );

    return result[0].toBytes();
  }

  try_onERC721Received(
    param0: Address,
    param1: Address,
    param2: BigInt,
    param3: Bytes
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "onERC721Received",
      "onERC721Received(address,address,uint256,bytes):(bytes4)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromAddress(param1),
        ethereum.Value.fromUnsignedBigInt(param2),
        ethereum.Value.fromBytes(param3)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  paused(): boolean {
    let result = super.call("paused", "paused():(bool)", []);

    return result[0].toBoolean();
  }

  try_paused(): ethereum.CallResult<boolean> {
    let result = super.tryCall("paused", "paused():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  proxiableUUID(): Bytes {
    let result = super.call("proxiableUUID", "proxiableUUID():(bytes32)", []);

    return result[0].toBytes();
  }

  try_proxiableUUID(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "proxiableUUID",
      "proxiableUUID():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get withdrawAmount(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class CleanUpLiensArrayCall extends ethereum.Call {
  get inputs(): CleanUpLiensArrayCall__Inputs {
    return new CleanUpLiensArrayCall__Inputs(this);
  }

  get outputs(): CleanUpLiensArrayCall__Outputs {
    return new CleanUpLiensArrayCall__Outputs(this);
  }
}

export class CleanUpLiensArrayCall__Inputs {
  _call: CleanUpLiensArrayCall;

  constructor(call: CleanUpLiensArrayCall) {
    this._call = call;
  }
}

export class CleanUpLiensArrayCall__Outputs {
  _call: CleanUpLiensArrayCall;

  constructor(call: CleanUpLiensArrayCall) {
    this._call = call;
  }
}

export class CollectManagerFeeCall extends ethereum.Call {
  get inputs(): CollectManagerFeeCall__Inputs {
    return new CollectManagerFeeCall__Inputs(this);
  }

  get outputs(): CollectManagerFeeCall__Outputs {
    return new CollectManagerFeeCall__Outputs(this);
  }
}

export class CollectManagerFeeCall__Inputs {
  _call: CollectManagerFeeCall;

  constructor(call: CollectManagerFeeCall) {
    this._call = call;
  }
}

export class CollectManagerFeeCall__Outputs {
  _call: CollectManagerFeeCall;

  constructor(call: CollectManagerFeeCall) {
    this._call = call;
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get data(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class LiquidateNFTCall extends ethereum.Call {
  get inputs(): LiquidateNFTCall__Inputs {
    return new LiquidateNFTCall__Inputs(this);
  }

  get outputs(): LiquidateNFTCall__Outputs {
    return new LiquidateNFTCall__Outputs(this);
  }
}

export class LiquidateNFTCall__Inputs {
  _call: LiquidateNFTCall;

  constructor(call: LiquidateNFTCall) {
    this._call = call;
  }

  get collection(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get recipient(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get deadline(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get signature(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }
}

export class LiquidateNFTCall__Outputs {
  _call: LiquidateNFTCall;

  constructor(call: LiquidateNFTCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get shares(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RefinanceAuctionCall extends ethereum.Call {
  get inputs(): RefinanceAuctionCall__Inputs {
    return new RefinanceAuctionCall__Inputs(this);
  }

  get outputs(): RefinanceAuctionCall__Outputs {
    return new RefinanceAuctionCall__Outputs(this);
  }
}

export class RefinanceAuctionCall__Inputs {
  _call: RefinanceAuctionCall;

  constructor(call: RefinanceAuctionCall) {
    this._call = call;
  }

  get lien(): RefinanceAuctionCallLienStruct {
    return changetype<RefinanceAuctionCallLienStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get lienId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get rate(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RefinanceAuctionCall__Outputs {
  _call: RefinanceAuctionCall;

  constructor(call: RefinanceAuctionCall) {
    this._call = call;
  }
}

export class RefinanceAuctionCallLienStruct extends ethereum.Tuple {
  get lender(): Address {
    return this[0].toAddress();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get auctionStartBlock(): BigInt {
    return this[7].toBigInt();
  }

  get auctionDuration(): BigInt {
    return this[8].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SeizeCall extends ethereum.Call {
  get inputs(): SeizeCall__Inputs {
    return new SeizeCall__Inputs(this);
  }

  get outputs(): SeizeCall__Outputs {
    return new SeizeCall__Outputs(this);
  }
}

export class SeizeCall__Inputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }

  get lienPointers(): Array<SeizeCallLienPointersStruct> {
    return this._call.inputValues[0].value.toTupleArray<
      SeizeCallLienPointersStruct
    >();
  }
}

export class SeizeCall__Outputs {
  _call: SeizeCall;

  constructor(call: SeizeCall) {
    this._call = call;
  }
}

export class SeizeCallLienPointersStruct extends ethereum.Tuple {
  get lien(): SeizeCallLienPointersLienStruct {
    return changetype<SeizeCallLienPointersLienStruct>(this[0].toTuple());
  }

  get lienId(): BigInt {
    return this[1].toBigInt();
  }
}

export class SeizeCallLienPointersLienStruct extends ethereum.Tuple {
  get lender(): Address {
    return this[0].toAddress();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get auctionStartBlock(): BigInt {
    return this[7].toBigInt();
  }

  get auctionDuration(): BigInt {
    return this[8].toBigInt();
  }
}

export class SetManagerFeeCall extends ethereum.Call {
  get inputs(): SetManagerFeeCall__Inputs {
    return new SetManagerFeeCall__Inputs(this);
  }

  get outputs(): SetManagerFeeCall__Outputs {
    return new SetManagerFeeCall__Outputs(this);
  }
}

export class SetManagerFeeCall__Inputs {
  _call: SetManagerFeeCall;

  constructor(call: SetManagerFeeCall) {
    this._call = call;
  }

  get managerFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetManagerFeeCall__Outputs {
  _call: SetManagerFeeCall;

  constructor(call: SetManagerFeeCall) {
    this._call = call;
  }
}

export class StartAuctionCall extends ethereum.Call {
  get inputs(): StartAuctionCall__Inputs {
    return new StartAuctionCall__Inputs(this);
  }

  get outputs(): StartAuctionCall__Outputs {
    return new StartAuctionCall__Outputs(this);
  }
}

export class StartAuctionCall__Inputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }

  get lien(): StartAuctionCallLienStruct {
    return changetype<StartAuctionCallLienStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get lienId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class StartAuctionCall__Outputs {
  _call: StartAuctionCall;

  constructor(call: StartAuctionCall) {
    this._call = call;
  }
}

export class StartAuctionCallLienStruct extends ethereum.Tuple {
  get lender(): Address {
    return this[0].toAddress();
  }

  get borrower(): Address {
    return this[1].toAddress();
  }

  get collection(): Address {
    return this[2].toAddress();
  }

  get tokenId(): BigInt {
    return this[3].toBigInt();
  }

  get amount(): BigInt {
    return this[4].toBigInt();
  }

  get startTime(): BigInt {
    return this[5].toBigInt();
  }

  get rate(): BigInt {
    return this[6].toBigInt();
  }

  get auctionStartBlock(): BigInt {
    return this[7].toBigInt();
  }

  get auctionDuration(): BigInt {
    return this[8].toBigInt();
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
